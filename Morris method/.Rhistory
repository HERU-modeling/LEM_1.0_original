names(results) <- c("parameter", "mean", "stddev", "target")
##plot mean and stddev##
#ggplot(data=results, aes(x=mean, y=stddev))+geom_point() + labs(x="Mean of elementary effect", y="Standard deviation of elementary effect") + facet_wrap(~target, ncol=3)
results <- within(results, target <- factor(target, levels =mmtar.names))
with(results, levels(target))
diag.obs  = diag18.obs [-1, ]
ndiag.obs = ndiag18.obs[-1, ]
death.obs = death18.obs[-1, ]
# observed cumulative diagnosis
diag11.obs = group11(diag.obs)
# observed new diagnosis
ndiag.all.obs = rowSums(ndiag.obs)
ndiag.b.obs   = rowSums(ndiag.obs[ , grep("black", names18)]) # black
ndiag.m.obs   = rowSums(ndiag.obs[ , 1:3]) #msm
# observed death
death.all.obs = rowSums(death.obs)
death.b.obs   = rowSums(death.obs[ ,grep("black", names18)]) # black
death.m.obs   = rowSums(death.obs[ ,1:3]) #msm
tarmean <- as.vector(c(apply(diag11.obs, 2, mean), mean(ndiag.all.obs), mean(ndiag.b.obs), mean(ndiag.m.obs), mean(death.all.obs), mean(death.b.obs), mean(death.m.obs)))
tarmean <- rep(tarmean, each=npar)
results <- cbind(results, tarmean)
#Choose the value for mean and stddev larger to which parameter will be labelled
#ggplot(data =results, aes(x =mean, y =stddev)) + geom_point() + labs(x="Mean of elementary effect", y="Standard deviation of elementary effect") + facet_wrap(~target, ncol=3, scales="free") + geom_text(aes(label=ifelse(mean>0.1*tarmean | stddev>0.1*tarmean, as.character(parameter), '')), hjust=1, vjust=0.5, size=2.5)
#results[results$target=="New diag, M black HET" & results$mean>5,]
influential0 = subset(results, mean>0.05*tarmean | stddev>0.05*tarmean)
length(unique(influential0$parameter))
influential0 = subset(results, mean>0.075*tarmean | stddev>0.075*tarmean)
length(unique(influential0$parameter))
influential0 = subset(results, mean>0.05*tarmean | stddev>0.05*tarmean)
length(unique(influential0$parameter))
unique(influential0$parameter)
write.excel <- function(x, row.names=FALSE, col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t", row.names=row.names, col.names=col.names, ...)
}
write.excel(influential0)
influential0 = subset(results, mean>0.045*tarmean | stddev>0.045*tarmean)
length(unique(influential0$parameter))
write.excel <- function(x, row.names=FALSE, col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t", row.names=row.names, col.names=col.names, ...)
}
write.excel(influential0)
################################################################################
## Morris Method                                                              ##
################################################################################
# to isolate the parameters with greatest impact on calibration target outcomes
## Function set-up ##
rm(list=ls())
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#install.packages(c("deSolve", "openxlsx", "ggplot2"))
library(deSolve)
#library(ggplot2)
####Read in data####
CITY = "SEA"
source ("Data_input_v5.R")
n.gp = length(vparameters$names.gp)
state.name = vparameters$state.name
####Morris method parameters####
mmparn = free.par                 #free parameters inputs
names  = free.par.info$names      #name of free parameters
leng   = free.par.info$plength
mmtar.names <- c("Diagosed PLHIV, white MSM", "Diagosed PLHIV, black MSM", "Diagosed PLHIV, hispanic MSM", "Diagosed PLHIV, MSM/PWID",
"Diagosed PLHIV, PWID", "Diagosed PLHIV, male white HET", "Diagosed PLHIV, male black HET", "Diagosed PLHIV, male hisp HET",
"Diagosed PLHIV, female white HET", "Diagosed PLHIV, female black HET", "Diagosed PLHIV, female hispanic HET",
"New HIV diagoses, all", "New HIV diagoses, black", "New HIV diagoses, MSM",
"All-case deaths, PLHIV", "All-case deaths, black", "All-case deaths, MSM")
npar <- nrow(mmparn)
k    <- npar
low  <- mmparn$lower
high <- mmparn$upper
hl   <- matrix(c(high - low), nrow =k+1, ncol =k, byrow =T)
####Predefined parameters####
p  <- 8                 ##number of levels for input parameters
r  <- 10                ##sampling size (i.e. r sets of starting values)
nt <- 17                ##number of targets
delta <- p/(2*(p-1))    ##step size (relative change) to each parameter
####Create parameter space####
gridsize <- (1/(p-1)) * c(0:((p-1)/2))
grid     <- matrix(gridsize, nrow =npar, ncol =length(gridsize), byrow = T)
sampleind <- matrix(0, nrow=r, ncol=npar)
set.seed(54154)            #May the force be with you
for (i in 1:r){
sampleind[i, ] <- sample(c(1:length(gridsize)), size =npar, replace =T)   #starting value level indicator (random)
}
sv    <- matrix(0, nrow =r, ncol =npar)  ##r sets of starting values (sv)
xstar <- sv
for (i in 1:r){
for (j in 1:npar){
sv[i, j]    <- grid[j, sampleind[i, j]]               #starting values in the range [0, 1]
xstar[i, j] <- low[j] + sv[i, j] * (high[j] - low[j]) #starting values in their original scale
}
}
write.table(xstar, file="starting values.txt")
xarray     <- array(NA, c(k+1, k, r))  #parameter array: k parameters change k times (including the starting x* thus k+1 rows), repeat r times
Bstararray <- array(NA, c(k+1, k, r))
deltaarray <- array(0,  c(k+1, 3, r))
####Derive input parameter matrix####
set.seed(54)
for (i in 1:r){
Bstar <- matrix(NA, nrow =k+1, ncol =k)
##B matrix, J matrix, D matrix and P matrix
Bm    <- matrix(0,  nrow =k+1, ncol =k)
for (z in 2:k+1){
Bm[z, 1:z-1] = 1
}
Bm[2, 1] = 1
Jm    <- matrix(1, nrow =k+1, ncol =k)
Dm    <- diag(x=1, nrow =k,   ncol =k)
Drani <- sample(c(1:k), k/2, replace=F)
Dran  <- rep(1, k)
Dran[Drani] <- -1
Dm    <- Dm * Dran
Pran  <- sample(c(1:k), size =k, replace =F)
Pm    <- matrix(0, nrow =k, ncol =k)
for (z in 1:k){
Pm[z, Pran[z]] <- 1
}
Bstar <- (Jm[,1] %*% t(sv[i, ]) + (delta/2)*((2*Bm-Jm) %*% Dm +Jm)) %*% Pm
Bstararray[ , ,i] <- Bstar
inddelta <- rep(0, k+1)
for (j in 1:k+1){
diffB <- Bstar[j, ] - Bstar[j-1, ]
inddelta[j] <- which(diffB != 0)
}
inddelta <- as.matrix(inddelta, 1, k+1)
deltaarray[ , 1, i] <- inddelta
xmatrix <- matrix(low, nrow=k+1, ncol=k, byrow = T)
xmatrix <- xmatrix + hl*Bstar
for (j in 1:k+1){
deltaarray[j, 2, i] <- (xmatrix[j, inddelta[j]] - xmatrix[j-1, inddelta[j]])
if ( deltaarray[j, 2, i]>0) deltaarray[j, 3, i] = delta
else deltaarray[j, 3, i] = -delta
}
xarray[ , ,i] <- xmatrix
write.table(xmatrix, file=paste(i, "th matrix.csv"), sep = ",")
}
####Additional function to assign 18 groups into 11 in cumulative diag####
group11 = function(group18){
g11 = matrix(0, 4, 11)
g11[ , 4] = rowSums(group18[ , 4:6])
g11[ , 5] = rowSums(group18[ , 7:12])
g11[ , c(1:3, 6:11)] = group18[ , c(1:3, 13:18)]
return(g11)
}
####Call the ode model####
source("ode_model_func_v11.R")
####Analyzing mean and standard deviation of elementrary effect####
##assuming model is the function for per model run that will directly yield the calibration endpoints in 2015
##test data:
#nt=3
#result<-array(c(1:15), c(k+1, nt, r))
##
EEarrary <- array(NA, c(k, nt, r))  ##elementary effect for kth parameter on ntth target in rth round
for (i in 1:r){
MMresult <- array(0, c(4, nt, k+1))
pj = 0
source("freePar_ass.R")    #carry the free parameter values from xarray to par3 for ode functions
##derive MM result, copied from obj_func_v10##
out_euler <- euler(x, vt, ode_model, par3)[ ,-1]
outa = array(out_euler[-1, ], dim = c(n, length(state.name), n.gp)) # initial value deleted
outn = outa[ ,1:19, ]
dimnames(outa)[[2]]=state.name
#### All diagnoses
diag         = apply(outn[end_yr_ind, 10:19, ], c(1, 3), sum)
diag.all     = rowSums(diag)
diag.b       = rowSums(diag[ ,black])
#print(diff(apply(outn[,10:19,msm],1,sum)))
diag.m       = rowSums(diag[ ,msm])
diag18.model = matrix(0, 4, 18)
for (g in 1:18){
ind = which(rname %in% names18[g])
diag18.model[ ,g] = rowSums(diag[ ,ind])
}
# total diagnosis in 11 groups (combining MSM/PWID into one; PWID into one)
diag11.model = group11(diag18.model)
names11      = c(names18[1:3], "MSM/PWID", "PWID", names18[13:18])
diagc        = diag11.model
#### New diagnoses
ndiag        = rbind(outa[12, "diag", ], apply(outa[end_yr_ind, "diag", ], 2, diff))
ndiag.all    = rowSums(ndiag) # total
ndiag.b      = rowSums(ndiag[ ,black]) # black
ndiag.m      = rowSums(ndiag[ ,msm]) #msm
ndiagy       = cbind(ndiag.all, ndiag.b, ndiag.m)
#### Death
death        = rbind(outa[12, "death", ], apply(outa[end_yr_ind, "death", ], 2, diff))
death.all    = rowSums(death) # total
death.b      = rowSums(death[ ,black]) # black
death.m      = rowSums(death[ ,msm]) #msm
deathy       = cbind(death.all, death.b, death.m)
#### Combining all results
MMresult[ , ,1] <- cbind(diagc, ndiagy, deathy)
#MMresult[1,]<-result[1,,i]
for (pj in 1:k){
source("freePar_ass.R")
##derive MM result, copied from obj_func_v10##
out_euler <- euler(x, vt, ode_model, par3)[ ,-1]
outa = array(out_euler[-1, ], dim = c(n, length(state.name), n.gp)) # initial value deleted
outn = outa[ , 1:19, ]
dimnames(outa)[[2]] = state.name
#All diagnosis
diag         = apply(outn[end_yr_ind, 10:19, ], c(1, 3), sum)
diag.all     = rowSums(diag)
diag.b       = rowSums(diag[ ,black])
#print(diff(apply(outn[,10:19,msm],1,sum)))
diag.m       = rowSums(diag[ ,msm])
diag18.model = matrix(0, 4, 18)
for (g in 1:18){
ind = which(rname %in% names18[g])
diag18.model[ ,g] = rowSums(diag[ ,ind])
}
# total diagnosis in 11 groups (combining MSM/PWID into one; PWID into one)
diag11.model = group11(diag18.model)
names11      = c(names18[1:3], "MSM/PWID", "PWID", names18[13:18])
diagc        = diag11.model
# new diagnosis from model
ndiag     = rbind(outa[12, "diag", ], apply(outa[end_yr_ind, "diag", ], 2, diff))
ndiag.all = rowSums(ndiag) # total
ndiag.b   = rowSums(ndiag[ ,black]) # black
ndiag.m   = rowSums(ndiag[ ,msm]) #msm
ndiagy    = cbind(ndiag.all, ndiag.b, ndiag.m)
# death from model
death     = rbind(outa[12, "death", ], apply(outa[end_yr_ind, "death", ], 2, diff))
death.all = rowSums(death) # total
death.b   = rowSums(death[ ,black]) # black
death.m   = rowSums(death[ ,msm]) #msm
deathy    = cbind(death.all, death.b, death.m)
MMresult[ , ,pj+1] <- cbind(diagc, ndiagy, deathy)
#MMresult[pj+1,]<-result[pj+1,,r]
if (deltaarray[pj+1, 2, i] >0){
EEarrary[deltaarray[pj+1, 1, i], ,i] <- apply(((MMresult[ , ,pj+1] - MMresult[ , ,pj]) /   (deltaarray[pj+1, 3, i])), 2, mean)
}
else {
EEarrary[deltaarray[pj+1, 1, i], ,i] <- apply(((MMresult[ , ,pj]   - MMresult[ , ,pj+1]) / (deltaarray[pj+1, 3, i])), 2, mean)
}
}
}
##mean and std. dev. estimation##
mean   <-  matrix(NA, nrow=k, ncol=nt)
stddev <-  matrix(NA, nrow=k, ncol=nt)
for (i in 1:k){
for (j in 1:nt){
mean[i, j]   <- mean(abs(EEarrary[i, j, ]))
stddev[i, j] <- sd(EEarrary[i, j, ]) * sqrt(r-1) / sqrt(r)
}
}
meanv   <- as.vector(mean)
stddevv <- as.vector(stddev)
mmparn$parameter <- paste(mmparn$par, mmparn$gender, mmparn$ethnicity, mmparn$risk, mmparn$sexual.intensity, mmparn$cd4, sep = ".")
results <- data.frame(rep(mmparn$parameter, nt), meanv, stddevv, rep(mmtar.names, each=k))
names(results) <- c("parameter", "mean", "stddev", "target")
##plot mean and stddev##
#ggplot(data=results, aes(x=mean, y=stddev))+geom_point() + labs(x="Mean of elementary effect", y="Standard deviation of elementary effect") + facet_wrap(~target, ncol=3)
results <- within(results, target <- factor(target, levels =mmtar.names))
with(results, levels(target))
diag.obs  = diag18.obs [-1, ]
ndiag.obs = ndiag18.obs[-1, ]
death.obs = death18.obs[-1, ]
# observed cumulative diagnosis
diag11.obs = group11(diag.obs)
# observed new diagnosis
ndiag.all.obs = rowSums(ndiag.obs)
ndiag.b.obs   = rowSums(ndiag.obs[ , grep("black", names18)]) # black
ndiag.m.obs   = rowSums(ndiag.obs[ , 1:3]) #msm
# observed death
death.all.obs = rowSums(death.obs)
death.b.obs   = rowSums(death.obs[ ,grep("black", names18)]) # black
death.m.obs   = rowSums(death.obs[ ,1:3]) #msm
tarmean <- as.vector(c(apply(diag11.obs, 2, mean), mean(ndiag.all.obs), mean(ndiag.b.obs), mean(ndiag.m.obs), mean(death.all.obs), mean(death.b.obs), mean(death.m.obs)))
tarmean <- rep(tarmean, each=npar)
results <- cbind(results, tarmean)
influential0 = subset(results, mean>0.045*tarmean | stddev>0.045*tarmean)
length(unique(influential0$parameter))
influential0 = subset(results, mean>0.075*tarmean | stddev>0.075*tarmean)
length(unique(influential0$parameter))
influential1 = subset(results, mean>0.1*tarmean | stddev>0.1*tarmean)
length(unique(influential1$parameter))
unique(influential1$parameter)
vparameters$T1_O
################################################################################
## Morris Method                                                              ##
################################################################################
# to isolate the parameters with greatest impact on calibration target outcomes
## Function set-up ##
rm(list=ls())
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#install.packages(c("deSolve", "openxlsx", "ggplot2"))
library(deSolve)
#library(ggplot2)
####Read in data####
CITY = "SEA"
source ("Data_input_v5.R")
n.gp = length(vparameters$names.gp)
state.name = vparameters$state.name
####Morris method parameters####
mmparn = free.par                 #free parameters inputs
names  = free.par.info$names      #name of free parameters
leng   = free.par.info$plength
mmtar.names <- c("Diagosed PLHIV, white MSM", "Diagosed PLHIV, black MSM", "Diagosed PLHIV, hispanic MSM", "Diagosed PLHIV, MSM/PWID",
"Diagosed PLHIV, PWID", "Diagosed PLHIV, male white HET", "Diagosed PLHIV, male black HET", "Diagosed PLHIV, male hisp HET",
"Diagosed PLHIV, female white HET", "Diagosed PLHIV, female black HET", "Diagosed PLHIV, female hispanic HET",
"New HIV diagoses, all", "New HIV diagoses, black", "New HIV diagoses, MSM",
"All-case deaths, PLHIV", "All-case deaths, black", "All-case deaths, MSM")
npar <- nrow(mmparn)
k    <- npar
low  <- mmparn$lower
high <- mmparn$upper
hl   <- matrix(c(high - low), nrow =k+1, ncol =k, byrow =T)
####Predefined parameters####
p  <- 8                 ##number of levels for input parameters
r  <- 10                ##sampling size (i.e. r sets of starting values)
nt <- 17                ##number of targets
delta <- p/(2*(p-1))    ##step size (relative change) to each parameter
####Create parameter space####
gridsize <- (1/(p-1)) * c(0:((p-1)/2))
grid     <- matrix(gridsize, nrow =npar, ncol =length(gridsize), byrow = T)
sampleind <- matrix(0, nrow=r, ncol=npar)
set.seed(54154)            #May the force be with you
for (i in 1:r){
sampleind[i, ] <- sample(c(1:length(gridsize)), size =npar, replace =T)   #starting value level indicator (random)
}
sv    <- matrix(0, nrow =r, ncol =npar)  ##r sets of starting values (sv)
xstar <- sv
for (i in 1:r){
for (j in 1:npar){
sv[i, j]    <- grid[j, sampleind[i, j]]               #starting values in the range [0, 1]
xstar[i, j] <- low[j] + sv[i, j] * (high[j] - low[j]) #starting values in their original scale
}
}
write.table(xstar, file="starting values.txt")
xarray     <- array(NA, c(k+1, k, r))  #parameter array: k parameters change k times (including the starting x* thus k+1 rows), repeat r times
Bstararray <- array(NA, c(k+1, k, r))
deltaarray <- array(0,  c(k+1, 3, r))
####Derive input parameter matrix####
set.seed(54)
for (i in 1:r){
Bstar <- matrix(NA, nrow =k+1, ncol =k)
##B matrix, J matrix, D matrix and P matrix
Bm    <- matrix(0,  nrow =k+1, ncol =k)
for (z in 2:k+1){
Bm[z, 1:z-1] = 1
}
Bm[2, 1] = 1
Jm    <- matrix(1, nrow =k+1, ncol =k)
Dm    <- diag(x=1, nrow =k,   ncol =k)
Drani <- sample(c(1:k), k/2, replace=F)
Dran  <- rep(1, k)
Dran[Drani] <- -1
Dm    <- Dm * Dran
Pran  <- sample(c(1:k), size =k, replace =F)
Pm    <- matrix(0, nrow =k, ncol =k)
for (z in 1:k){
Pm[z, Pran[z]] <- 1
}
Bstar <- (Jm[,1] %*% t(sv[i, ]) + (delta/2)*((2*Bm-Jm) %*% Dm +Jm)) %*% Pm
Bstararray[ , ,i] <- Bstar
inddelta <- rep(0, k+1)
for (j in 1:k+1){
diffB <- Bstar[j, ] - Bstar[j-1, ]
inddelta[j] <- which(diffB != 0)
}
inddelta <- as.matrix(inddelta, 1, k+1)
deltaarray[ , 1, i] <- inddelta
xmatrix <- matrix(low, nrow=k+1, ncol=k, byrow = T)
xmatrix <- xmatrix + hl*Bstar
for (j in 1:k+1){
deltaarray[j, 2, i] <- (xmatrix[j, inddelta[j]] - xmatrix[j-1, inddelta[j]])
if ( deltaarray[j, 2, i]>0) deltaarray[j, 3, i] = delta
else deltaarray[j, 3, i] = -delta
}
xarray[ , ,i] <- xmatrix
write.table(xmatrix, file=paste(i, "th matrix.csv"), sep = ",")
}
####Additional function to assign 18 groups into 11 in cumulative diag####
group11 = function(group18){
g11 = matrix(0, 4, 11)
g11[ , 4] = rowSums(group18[ , 4:6])
g11[ , 5] = rowSums(group18[ , 7:12])
g11[ , c(1:3, 6:11)] = group18[ , c(1:3, 13:18)]
return(g11)
}
####Call the ode model####
source("ode_model_func_v11.R")
####Analyzing mean and standard deviation of elementrary effect####
##assuming model is the function for per model run that will directly yield the calibration endpoints in 2015
##test data:
#nt=3
#result<-array(c(1:15), c(k+1, nt, r))
##
EEarrary <- array(NA, c(k, nt, r))  ##elementary effect for kth parameter on ntth target in rth round
for (i in 1:r){
MMresult <- array(0, c(4, nt, k+1))
pj = 0
source("freePar_ass.R")    #carry the free parameter values from xarray to par3 for ode functions
##derive MM result, copied from obj_func_v10##
out_euler <- euler(x, vt, ode_model, par3)[ ,-1]
outa = array(out_euler[-1, ], dim = c(n, length(state.name), n.gp)) # initial value deleted
outn = outa[ ,1:19, ]
dimnames(outa)[[2]]=state.name
#### All diagnoses
diag         = apply(outn[end_yr_ind, 10:19, ], c(1, 3), sum)
diag.all     = rowSums(diag)
diag.b       = rowSums(diag[ ,black])
#print(diff(apply(outn[,10:19,msm],1,sum)))
diag.m       = rowSums(diag[ ,msm])
diag18.model = matrix(0, 4, 18)
for (g in 1:18){
ind = which(rname %in% names18[g])
diag18.model[ ,g] = rowSums(diag[ ,ind])
}
# total diagnosis in 11 groups (combining MSM/PWID into one; PWID into one)
diag11.model = group11(diag18.model)
names11      = c(names18[1:3], "MSM/PWID", "PWID", names18[13:18])
diagc        = diag11.model
#### New diagnoses
ndiag        = rbind(outa[12, "diag", ], apply(outa[end_yr_ind, "diag", ], 2, diff))
ndiag.all    = rowSums(ndiag) # total
ndiag.b      = rowSums(ndiag[ ,black]) # black
ndiag.m      = rowSums(ndiag[ ,msm]) #msm
ndiagy       = cbind(ndiag.all, ndiag.b, ndiag.m)
#### Death
death        = rbind(outa[12, "death", ], apply(outa[end_yr_ind, "death", ], 2, diff))
death.all    = rowSums(death) # total
death.b      = rowSums(death[ ,black]) # black
death.m      = rowSums(death[ ,msm]) #msm
deathy       = cbind(death.all, death.b, death.m)
#### Combining all results
MMresult[ , ,1] <- cbind(diagc, ndiagy, deathy)
#MMresult[1,]<-result[1,,i]
for (pj in 1:k){
source("freePar_ass.R")
##derive MM result, copied from obj_func_v10##
out_euler <- euler(x, vt, ode_model, par3)[ ,-1]
outa = array(out_euler[-1, ], dim = c(n, length(state.name), n.gp)) # initial value deleted
outn = outa[ , 1:19, ]
dimnames(outa)[[2]] = state.name
#All diagnosis
diag         = apply(outn[end_yr_ind, 10:19, ], c(1, 3), sum)
diag.all     = rowSums(diag)
diag.b       = rowSums(diag[ ,black])
#print(diff(apply(outn[,10:19,msm],1,sum)))
diag.m       = rowSums(diag[ ,msm])
diag18.model = matrix(0, 4, 18)
for (g in 1:18){
ind = which(rname %in% names18[g])
diag18.model[ ,g] = rowSums(diag[ ,ind])
}
# total diagnosis in 11 groups (combining MSM/PWID into one; PWID into one)
diag11.model = group11(diag18.model)
names11      = c(names18[1:3], "MSM/PWID", "PWID", names18[13:18])
diagc        = diag11.model
# new diagnosis from model
ndiag     = rbind(outa[12, "diag", ], apply(outa[end_yr_ind, "diag", ], 2, diff))
ndiag.all = rowSums(ndiag) # total
ndiag.b   = rowSums(ndiag[ ,black]) # black
ndiag.m   = rowSums(ndiag[ ,msm]) #msm
ndiagy    = cbind(ndiag.all, ndiag.b, ndiag.m)
# death from model
death     = rbind(outa[12, "death", ], apply(outa[end_yr_ind, "death", ], 2, diff))
death.all = rowSums(death) # total
death.b   = rowSums(death[ ,black]) # black
death.m   = rowSums(death[ ,msm]) #msm
deathy    = cbind(death.all, death.b, death.m)
MMresult[ , ,pj+1] <- cbind(diagc, ndiagy, deathy)
#MMresult[pj+1,]<-result[pj+1,,r]
if (deltaarray[pj+1, 2, i] >0){
EEarrary[deltaarray[pj+1, 1, i], ,i] <- apply(((MMresult[ , ,pj+1] - MMresult[ , ,pj]) /   (deltaarray[pj+1, 3, i])), 2, mean)
}
else {
EEarrary[deltaarray[pj+1, 1, i], ,i] <- apply(((MMresult[ , ,pj]   - MMresult[ , ,pj+1]) / (deltaarray[pj+1, 3, i])), 2, mean)
}
}
}
##mean and std. dev. estimation##
mean   <-  matrix(NA, nrow=k, ncol=nt)
stddev <-  matrix(NA, nrow=k, ncol=nt)
for (i in 1:k){
for (j in 1:nt){
mean[i, j]   <- mean(abs(EEarrary[i, j, ]))
stddev[i, j] <- sd(EEarrary[i, j, ]) * sqrt(r-1) / sqrt(r)
}
}
meanv   <- as.vector(mean)
stddevv <- as.vector(stddev)
mmparn$parameter <- paste(mmparn$par, mmparn$gender, mmparn$ethnicity, mmparn$risk, mmparn$sexual.intensity, mmparn$cd4, sep = ".")
results <- data.frame(rep(mmparn$parameter, nt), meanv, stddevv, rep(mmtar.names, each=k))
names(results) <- c("parameter", "mean", "stddev", "target")
##plot mean and stddev##
#ggplot(data=results, aes(x=mean, y=stddev))+geom_point() + labs(x="Mean of elementary effect", y="Standard deviation of elementary effect") + facet_wrap(~target, ncol=3)
results <- within(results, target <- factor(target, levels =mmtar.names))
with(results, levels(target))
diag.obs  = diag18.obs [-1, ]
ndiag.obs = ndiag18.obs[-1, ]
death.obs = death18.obs[-1, ]
# observed cumulative diagnosis
diag11.obs = group11(diag.obs)
# observed new diagnosis
ndiag.all.obs = rowSums(ndiag.obs)
ndiag.b.obs   = rowSums(ndiag.obs[ , grep("black", names18)]) # black
ndiag.m.obs   = rowSums(ndiag.obs[ , 1:3]) #msm
# observed death
death.all.obs = rowSums(death.obs)
death.b.obs   = rowSums(death.obs[ ,grep("black", names18)]) # black
death.m.obs   = rowSums(death.obs[ ,1:3]) #msm
tarmean <- as.vector(c(apply(diag11.obs, 2, mean), mean(ndiag.all.obs), mean(ndiag.b.obs), mean(ndiag.m.obs), mean(death.all.obs), mean(death.b.obs), mean(death.m.obs)))
tarmean <- rep(tarmean, each=npar)
results <- cbind(results, tarmean)
influential0 = subset(results, mean>0.075*tarmean | stddev>0.075*tarmean)
length(unique(influential0$parameter))
influential1 = subset(results, mean>0.1*tarmean | stddev>0.1*tarmean)
length(unique(influential1$parameter))
unique(influential1$parameter)
