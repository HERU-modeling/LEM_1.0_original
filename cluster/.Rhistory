paste0("aa", CITY, "-FF")
CITY="NYC"
paste0("aa", CITY, "-FF")
load(outputs.RData)
load("outputs.RData")
View(outcome)
outcome$nmcl
outcome$gof
outcome$gof2000
outcome$nmrs2000
##################################################################################
# An R script to solve ODE's of the HIV model using deSolve package.             #
#                                                                                #
# Author:  Jeong Min, Xiao Zang, Emanuel Krebs                                   #
# updated: March 19, 2018                                                        #
##################################################################################
#A pdf document that provides very detailed information about the package "deSolve"
#vignette("deSolve")
## Module set-up ##
rm(list=ls())
#
# library(rstudioapi)
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(dfoptim) #for calibration function nmkb
library(openxlsx)
source("ode_model_func_v11.R")   #ode function module
source("obj_func_v11.R")         #objective function module
## Read in data and all inputs ##
#### SET CITY ####
CITY = "NYC"
#### SET CITY ####
source ("Data_input_v6.R")
nOAT.m
vparameters$nOAT.m
sigma
vparameters$sigmaO.FM
paste0("outputs_", CITY, ".RData")
?iris
## Module set-up ##
rm(list=ls())
library(dfoptim) #for calibration function nmkb
library(openxlsx)
library(foreach)
library(doParallel)
source("ode_model_func_v11.R")   #ode function module
source("obj_func_v11.R")         #objective function module
## Module set-up ##
rm(list=ls())
library(dfoptim) #for calibration function nmkb
library(openxlsx)
library(foreach)
library(doParallel)
source("ode_model_func_v11.R")   #ode function module
source("obj_func_v11.R")         #objective function module
#### SET CITY ####
CITY = "SEA"
source ("Data_input_v6.R")
#### Random sampling to obtain multiple starting values ####
library(prevalence)
library(mc2d)
library(MCMCpack)
###### Latin hypercube sampling to get 1,000 simplexes for calibration######
#install.packages("FME")
library(FME)
nsample = 1000
# top = 2000
npar    = nrow (calpar)
set.seed(165128975)
# generates Latin hypercube samples from 90% interval
lhs = Latinhyper(matrix(c(0.05,0.95), npar, 2, byrow=T), nsample)
randsp = matrix(0, nsample, npar)
for (i in 1:npar){
if (calpar$no.par[i] != 3){
if (calpar$dist[i] == "beta"){
randsp [ ,i] = qbeta(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2)
}
else if (calpar$dist[i] == "pert") {
randsp [ ,i] = qbetagen(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2, calpar[i, ]$lower, calpar[i, ]$upper)
}
else if (calpar$dist[i] == "1/pert") {
randsp [ ,i] = 1/(qbetagen(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2, 1/calpar[i, ]$upper, 1/calpar[i, ]$lower))
}
else if (calpar$dist[i] == "gamma") {
randsp [ ,i] = qgamma(lhs[ ,i], calpar[i, ]$par1, 1/calpar[i, ]$par2)
}
else if (calpar$dist[i] == "uni") {
randsp [ ,i] = qunif(lhs[ ,i], calpar[i, ]$lower, calpar[i, ]$upper)
}
else if (calpar$dist[i] == "1/uni") {
randsp [ ,i] = 1/(qunif(lhs[ ,i], 1/calpar[i, ]$upper, 1/calpar[i, ]$lower))
}
else if (calpar$dist[i] == "ln") {
randsp [ ,i] = qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2)
}
else if (calpar$dist[i] == "1-lognormal") {
randsp [ ,i] = 1- (qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2))
}
else if (calpar$dist[i] == "1/ln") {
randsp [ ,i] = 1/(qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2))
}
else if (calpar$dist[i] == "poisson") {
randsp [ ,i] = qpois(lhs[ ,i], calpar[i, ]$par1) / calpar[i, ]$par2
}
}
else if (calpar$dist[i] == "dirichlet_sp"){
dirsm        = rdirichlet(nsample, as.numeric(c(calpar[i, ]$par1, calpar[i, ]$par2, calpar[i, ]$par3)))
randsp [ ,i] = dirsm[,1]*0.3 + dirsm[ ,2]*0 + dirsm[ ,3]*1
}
}
if(any(randsp - matrix(rep(calpar$lower, each=nsample), nrow = nsample, ncol=npar) < 0 )){
lowind <- which(grepl(TRUE, randsp - matrix(rep(calpar$lower, each=nsample), nrow = nsample, ncol=npar) < 0))
nlowind <- length(lowind)
collowind <- ceiling(lowind / nsample)
rowlowind <- lowind - (collowind - 1) * nsample
for (ll in 1: nlowind) {
randsp[rowlowind[ll], collowind[ll]] <- calpar$lower[collowind[ll]]*1.01
}
}
if(any(matrix(rep(calpar$upper, each=nsample), nrow = nsample, ncol=npar) - randsp < 0)){
highind <- which(grepl(TRUE, matrix(rep(calpar$upper, each=nsample), nrow = nsample, ncol=npar) - randsp < 0))
nhighind <- length(highind)
colhighind <- ceiling(highind / nsample)
rowhighind <- highind - (colhighind - 1 ) * nsample
for (hh in 1: nhighind) {
randsp[rowhighind[hh], colhighind[hh]] <- calpar$upper[colhighind[hh]]*0.99
}
}
any(randsp - matrix(rep(calpar$lower, each=nsample), nrow = nsample, ncol=npar) < 0 )
any(matrix(rep(calpar$upper, each=nsample), nrow = nsample, ncol=npar) - randsp < 0)
i=106
nmrs <- dfoptim::nmkb(par =randsp[i, ], fn =obj,
lower = calpar$lower, upper = calpar$upper,
calpar.info = calpar.info, fixed = vparameters, fixed.list =vlist,
calib.target = calib.target, valid.target = valid.target)
calpar$pe
randsp[ , 106]
randsp
randsp[106 , ]
calpar$pe
randsp[106 , ] <- calpar$pe
randsp[106 , ]
randsp
##################################################################################
# An R script to solve ODE's of the HIV model using deSolve package.             #
#                                                                                #
# Author:  Jeong Min, Xiao Zang, Emanuel Krebs                                   #
# updated: March 19, 2018                                                        #
##################################################################################
## Module set-up ##
rm(list=ls())
# library(foreach)
# library(doParallel)
# nodeslist = unlist(strsplit(Sys.getenv("NODESLIST"), split=" "))
# cl = makeCluster(nodeslist, type = "PSOCK")
# registerDoParallel(cl)
library(dfoptim) #for calibration function nmkb
library(openxlsx)
library(foreach)
library(doParallel)
source("ode_model_func_v11.R")   #ode function module
source("obj_func_v11.R")         #objective function module
## Read in data and all inputs ##
#### SET CITY ####
CITY = "SEA"
#### SET CITY ####
source ("Data_input_v6.R")
#### Random sampling to obtain multiple starting values ####
library(prevalence)
library(mc2d)
library(MCMCpack)
###### Latin hypercube sampling to get 1,000 simplexes for calibration######
#install.packages("FME")
library(FME)
nsample = 1000
# top = 2000
npar    = nrow (calpar)
set.seed(165128975)
# generates Latin hypercube samples from 90% interval
lhs = Latinhyper(matrix(c(0.05,0.95), npar, 2, byrow=T), nsample)
randsp = matrix(0, nsample, npar)
for (i in 1:npar){
if (calpar$no.par[i] != 3){
if (calpar$dist[i] == "beta"){
randsp [ ,i] = qbeta(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2)
}
else if (calpar$dist[i] == "pert") {
randsp [ ,i] = qbetagen(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2, calpar[i, ]$lower, calpar[i, ]$upper)
}
else if (calpar$dist[i] == "1/pert") {
randsp [ ,i] = 1/(qbetagen(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2, 1/calpar[i, ]$upper, 1/calpar[i, ]$lower))
}
else if (calpar$dist[i] == "gamma") {
randsp [ ,i] = qgamma(lhs[ ,i], calpar[i, ]$par1, 1/calpar[i, ]$par2)
}
else if (calpar$dist[i] == "uni") {
randsp [ ,i] = qunif(lhs[ ,i], calpar[i, ]$lower, calpar[i, ]$upper)
}
else if (calpar$dist[i] == "1/uni") {
randsp [ ,i] = 1/(qunif(lhs[ ,i], 1/calpar[i, ]$upper, 1/calpar[i, ]$lower))
}
else if (calpar$dist[i] == "ln") {
randsp [ ,i] = qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2)
}
else if (calpar$dist[i] == "1-lognormal") {
randsp [ ,i] = 1- (qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2))
}
else if (calpar$dist[i] == "1/ln") {
randsp [ ,i] = 1/(qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2))
}
else if (calpar$dist[i] == "poisson") {
randsp [ ,i] = qpois(lhs[ ,i], calpar[i, ]$par1) / calpar[i, ]$par2
}
}
else if (calpar$dist[i] == "dirichlet_sp"){
dirsm        = rdirichlet(nsample, as.numeric(c(calpar[i, ]$par1, calpar[i, ]$par2, calpar[i, ]$par3)))
randsp [ ,i] = dirsm[,1]*0.3 + dirsm[ ,2]*0 + dirsm[ ,3]*1
}
}
if(any(randsp - matrix(rep(calpar$lower, each=nsample), nrow = nsample, ncol=npar) < 0 )){
lowind <- which(grepl(TRUE, randsp - matrix(rep(calpar$lower, each=nsample), nrow = nsample, ncol=npar) < 0))
nlowind <- length(lowind)
collowind <- ceiling(lowind / nsample)
rowlowind <- lowind - (collowind - 1) * nsample
for (ll in 1: nlowind) {
randsp[rowlowind[ll], collowind[ll]] <- calpar$lower[collowind[ll]]*1.01
}
}
if(any(matrix(rep(calpar$upper, each=nsample), nrow = nsample, ncol=npar) - randsp < 0)){
highind <- which(grepl(TRUE, matrix(rep(calpar$upper, each=nsample), nrow = nsample, ncol=npar) - randsp < 0))
nhighind <- length(highind)
colhighind <- ceiling(highind / nsample)
rowhighind <- highind - (colhighind - 1 ) * nsample
for (hh in 1: nhighind) {
randsp[rowhighind[hh], colhighind[hh]] <- calpar$upper[colhighind[hh]]*0.99
}
}
randsp<-randsp[104:106, ]
randsp
## Multiple calibrations ##
nmrs = as.list(0)
ncores = Sys.getenv("SLURM_NTASKS")
registerDoParallel(cores = ncores)
ncores
ncores=3
registerDoParallel(cores = ncores)
npar
nsample
nsample=3
nmcl =  matrix(0, nrow = npar, ncol = nsample)
nmcl
nmcl <- foreach(i=1:nsample, .combine=cbind, .export = c("msm.h","inits", "CITY", "names.e", "names.msm", "names.pwid", "randsp", "obj", "calpar", "calpar.info", "vparameters", "vlist", "calib.target", "valid.target", "names.gp", "names18", "state.name", "par_info", "gp18.gn", "x", "vt", "ode_model", "n", "end_yr_ind", "black", "msm", "rname", "group11", "midu", "all.msm", "init.tot", "FoI", "ass.eO", "ass.eS", "het", "ode_list", "oat", "off.oat", "ode_list_offOAT", "ode_list_OAT", "init.group.prop", "m", "het.m.l", "f", "het.f.l", "msm.l", "white", "hisp", "f.high", "m.high", "het.l", "all.idu", "yr", "nyr", "gp.gn.fun", "gp18.gn.fun", "group11", "model.initial", "msm.gn.fun", "ode_list", "ode_list_OAT", "ode_list_offOAT", "ode_model", "pwid.gn.fun", "euler")) %dopar% {
#nmcl <- foreach(i=1:nsample, .combine=cbind) %dopar% {
nmrs <- dfoptim::nmkb(par =randsp[i, ], fn =obj,
lower = calpar$lower, upper = calpar$upper,
calpar.info = calpar.info, fixed = vparameters, fixed.list =vlist,
calib.target = calib.target, valid.target = valid.target)
nmrs$par
}
nsample
nmcl <- foreach(i=1:nsample, .combine=cbind, .export = c("msm.h","inits", "CITY", "names.e", "names.msm", "names.pwid", "randsp", "obj", "calpar", "calpar.info", "vparameters", "vlist", "calib.target", "valid.target", "names.gp", "names18", "state.name", "par_info", "gp18.gn", "x", "vt", "ode_model", "n", "end_yr_ind", "black", "msm", "rname", "group11", "midu", "all.msm", "init.tot", "FoI", "ass.eO", "ass.eS", "het", "ode_list", "oat", "off.oat", "ode_list_offOAT", "ode_list_OAT", "init.group.prop", "m", "het.m.l", "f", "het.f.l", "msm.l", "white", "hisp", "f.high", "m.high", "het.l", "all.idu", "yr", "nyr", "gp.gn.fun", "gp18.gn.fun", "group11", "model.initial", "msm.gn.fun", "ode_list", "ode_list_OAT", "ode_list_offOAT", "ode_model", "pwid.gn.fun", "euler")) %dopar% {
nmrs <- dfoptim::nmkb(par =randsp[i, ], fn =obj,
lower = calpar$lower, upper = calpar$upper,
calpar.info = calpar.info, fixed = vparameters, fixed.list =vlist,
calib.target = calib.target, valid.target = valid.target)
nmrs$par
}
##################################################################################
# An R script to solve ODE's of the HIV model using deSolve package.             #
#                                                                                #
# Author:  Jeong Min, Xiao Zang, Emanuel Krebs                                   #
# updated: March 19, 2018                                                        #
##################################################################################
## Module set-up ##
rm(list=ls())
# library(foreach)
# library(doParallel)
# nodeslist = unlist(strsplit(Sys.getenv("NODESLIST"), split=" "))
# cl = makeCluster(nodeslist, type = "PSOCK")
# registerDoParallel(cl)
library(dfoptim) #for calibration function nmkb
library(openxlsx)
library(foreach)
library(doParallel)
source("ode_model_func_v11.R")   #ode function module
source("obj_func_v11.R")         #objective function module
## Read in data and all inputs ##
#### SET CITY ####
CITY = "SEA"
#### SET CITY ####
source ("Data_input_v6.R")
#### Random sampling to obtain multiple starting values ####
library(prevalence)
library(mc2d)
library(MCMCpack)
###### Latin hypercube sampling to get 1,000 simplexes for calibration######
#install.packages("FME")
library(FME)
nsample = 1000
# top = 2000
npar    = nrow (calpar)
set.seed(165128975)
# generates Latin hypercube samples from 90% interval
lhs = Latinhyper(matrix(c(0.05,0.95), npar, 2, byrow=T), nsample)
randsp = matrix(0, nsample, npar)
for (i in 1:npar){
if (calpar$no.par[i] != 3){
if (calpar$dist[i] == "beta"){
randsp [ ,i] = qbeta(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2)
}
else if (calpar$dist[i] == "pert") {
randsp [ ,i] = qbetagen(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2, calpar[i, ]$lower, calpar[i, ]$upper)
}
else if (calpar$dist[i] == "1/pert") {
randsp [ ,i] = 1/(qbetagen(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2, 1/calpar[i, ]$upper, 1/calpar[i, ]$lower))
}
else if (calpar$dist[i] == "gamma") {
randsp [ ,i] = qgamma(lhs[ ,i], calpar[i, ]$par1, 1/calpar[i, ]$par2)
}
else if (calpar$dist[i] == "uni") {
randsp [ ,i] = qunif(lhs[ ,i], calpar[i, ]$lower, calpar[i, ]$upper)
}
else if (calpar$dist[i] == "1/uni") {
randsp [ ,i] = 1/(qunif(lhs[ ,i], 1/calpar[i, ]$upper, 1/calpar[i, ]$lower))
}
else if (calpar$dist[i] == "ln") {
randsp [ ,i] = qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2)
}
else if (calpar$dist[i] == "1-lognormal") {
randsp [ ,i] = 1- (qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2))
}
else if (calpar$dist[i] == "1/ln") {
randsp [ ,i] = 1/(qlnorm(lhs[ ,i], calpar[i, ]$par1, calpar[i, ]$par2))
}
else if (calpar$dist[i] == "poisson") {
randsp [ ,i] = qpois(lhs[ ,i], calpar[i, ]$par1) / calpar[i, ]$par2
}
}
else if (calpar$dist[i] == "dirichlet_sp"){
dirsm        = rdirichlet(nsample, as.numeric(c(calpar[i, ]$par1, calpar[i, ]$par2, calpar[i, ]$par3)))
randsp [ ,i] = dirsm[,1]*0.3 + dirsm[ ,2]*0 + dirsm[ ,3]*1
}
}
if(any(randsp - matrix(rep(calpar$lower, each=nsample), nrow = nsample, ncol=npar) < 0 )){
lowind <- which(grepl(TRUE, randsp - matrix(rep(calpar$lower, each=nsample), nrow = nsample, ncol=npar) < 0))
nlowind <- length(lowind)
collowind <- ceiling(lowind / nsample)
rowlowind <- lowind - (collowind - 1) * nsample
for (ll in 1: nlowind) {
randsp[rowlowind[ll], collowind[ll]] <- calpar$lower[collowind[ll]]*1.01
}
}
if(any(matrix(rep(calpar$upper, each=nsample), nrow = nsample, ncol=npar) - randsp < 0)){
highind <- which(grepl(TRUE, matrix(rep(calpar$upper, each=nsample), nrow = nsample, ncol=npar) - randsp < 0))
nhighind <- length(highind)
colhighind <- ceiling(highind / nsample)
rowhighind <- highind - (colhighind - 1 ) * nsample
for (hh in 1: nhighind) {
randsp[rowhighind[hh], colhighind[hh]] <- calpar$upper[colhighind[hh]]*0.99
}
}
randsp[106 , ]
